Parameters:
  cognitoUserPoolArn:
    Type: String
    Description: The ARN of the Cognito User pool federated with ITSME
  corsallowOrigins:
    Type: String
    Default: http://localhost:3000
    Description: CORS Allowed Origin
Resources:
  itsmeloginpocFD694AB8:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableClass: STANDARD_INFREQUENT_ACCESS
      TableName: itsmeloginpoc
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  ReadServiceRole2C10309D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ReadServiceRoleDefaultPolicy77F44719:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:Scan
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - itsmeloginpocFD694AB8
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: ReadServiceRoleDefaultPolicy77F44719
      Roles:
        - Ref: ReadServiceRole2C10309D
  Read0389503C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          var AWS = require('aws-sdk');
          var ddb = new AWS.DynamoDB({ apiVersion: '2012-08-10' });

          exports.handler = async (event) => {
              try {
                  var ID = event.requestContext.authorizer.claims['custom:eid'];
                  var params = {
                      TableName: process.env.TABLE_NAME,
                      Key: {
                          id: { S: ID }
                      }
                  };
                  var data;
                  try {
                      data = await ddb.getItem(params).promise();
                      console.log("Item read successfully:", data);
                  } catch (err) {
                      console.log("Error: ", err);
                      data = err;
                  }
                  var response = {
                      headers: {
                          "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with",
                          "Access-Control-Allow-Origin": process.env.CORS_ORIGIN,
                          "Access-Control-Allow-Methods": "OPTIONS,GET",
                          "Access-Control-Allow-Credentials": true,
                      },
                      'statusCode': 200,
                      'body': JSON.stringify({
                          message: data
                      })
                  };
              } catch (err) {
                  console.log(err);
                  return err;
              }
              return response;
          };
      Role:
        Fn::GetAtt:
          - ReadServiceRole2C10309D
          - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: itsmeloginpocFD694AB8
          CORS_ORIGIN:
            Ref: corsallowOrigins
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - ReadServiceRoleDefaultPolicy77F44719
      - ReadServiceRole2C10309D
  LambdaLogGroupRead:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: Read0389503C
      RetentionInDays: 7
  WriteServiceRole54CB8098:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  WriteServiceRoleDefaultPolicy95693672:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - itsmeloginpocFD694AB8
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: WriteServiceRoleDefaultPolicy95693672
      Roles:
        - Ref: WriteServiceRole54CB8098
  Write20B66CD8:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          var AWS = require('aws-sdk');
          var ddb = new AWS.DynamoDB({ apiVersion: '2012-08-10' });

          exports.handler = async (event) => {
              try {
                  var obj = JSON.parse(event.body);
                  var ID = event.requestContext.authorizer.claims['custom:eid'];
                  var NAME = obj.name;
                  var params = {
                      TableName: process.env.TABLE_NAME,
                      Item: {
                          id: { S: ID },
                          name: { S: NAME }
                      }
                  };
                  var data;
                  var msg;
                  try {
                      data = await ddb.putItem(params).promise();
                      console.log("Item entered successfully:", data);
                      msg = 'Item entered successfully';
                  } catch (err) {
                      console.log("Error: ", err);
                      msg = err;
                  }
                  var response = {
                      headers: {
                          "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with",
                          "Access-Control-Allow-Origin": process.env.CORS_ORIGIN,
                          "Access-Control-Allow-Methods": "OPTIONS,POST",
                          "Access-Control-Allow-Credentials": true,
                      },
                      'statusCode': 200,
                      'body': JSON.stringify({
                          message: msg
                      })
                  };
              } catch (err) {
                  console.log(err);
                  return err;
              }
              return response;
          };
      Role:
        Fn::GetAtt:
          - WriteServiceRole54CB8098
          - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: itsmeloginpocFD694AB8
          CORS_ORIGIN:
            Ref: corsallowOrigins
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - WriteServiceRoleDefaultPolicy95693672
      - WriteServiceRole54CB8098
  LambdaLogGroupWrite:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: Write20B66CD8
      RetentionInDays: 7
  PocItsmeApiC7C28CD6:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Login with itsme Poc
      Name: PocItsmeApi
  PocItsmeApiDeployment1E79BFAF1dfb6dd121dcfb296db2db5540de7f7a:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
      Description: Login with itsme Poc
    DependsOn:
      - PocItsmeApiOPTIONS7A36E8E4
      - PocItsmeApireaddbGET72C3E9AE
      - PocItsmeApireaddbOPTIONS5D0D56D9
      - PocItsmeApireaddbBBD46ECF
      - PocItsmeApiwritedbOPTIONSE537524E
      - PocItsmeApiwritedbPOSTDB7687E4
      - PocItsmeApiwritedb1B614255
  PocItsmeApiDeploymentStageprod10084B92:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
      DeploymentId:
        Ref: PocItsmeApiDeployment1E79BFAF1dfb6dd121dcfb296db2db5540de7f7a
      StageName: prod
  PocItsmeApiOPTIONS7A36E8E4:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Fn::GetAtt:
          - PocItsmeApiC7C28CD6
          - RootResourceId
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin:
                Fn::Join:
                  - ""
                  - - "'"
                    - Ref: corsallowOrigins
                    - "'"
              method.response.header.Vary: "'Origin'"
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,DELETE,OPTIONS'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Vary: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  PocItsmeApiwritedb1B614255:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - PocItsmeApiC7C28CD6
          - RootResourceId
      PathPart: writedb
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
  PocItsmeApiwritedbOPTIONSE537524E:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: PocItsmeApiwritedb1B614255
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin:
                Fn::Join:
                  - ""
                  - - "'"
                    - Ref: corsallowOrigins
                    - "'"
              method.response.header.Vary: "'Origin'"
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,DELETE,OPTIONS'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Vary: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  PocItsmeApiwritedbPOSTApiPermissionLoginwithitsmeCdkStackPocItsmeApiDC0C1E2APOSTwritedb44257A26:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - Write20B66CD8
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: PocItsmeApiC7C28CD6
            - /
            - Ref: PocItsmeApiDeploymentStageprod10084B92
            - /POST/writedb
  PocItsmeApiwritedbPOSTApiPermissionTestLoginwithitsmeCdkStackPocItsmeApiDC0C1E2APOSTwritedbCEA84102:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - Write20B66CD8
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: PocItsmeApiC7C28CD6
            - /test-invoke-stage/POST/writedb
  PocItsmeApiwritedbPOSTDB7687E4:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: PocItsmeApiwritedb1B614255
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: restapicognitoauthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - Write20B66CD8
                  - Arn
              - /invocations
  PocItsmeApireaddbBBD46ECF:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - PocItsmeApiC7C28CD6
          - RootResourceId
      PathPart: readdb
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
  PocItsmeApireaddbOPTIONS5D0D56D9:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: PocItsmeApireaddbBBD46ECF
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin:
                Fn::Join:
                  - ""
                  - - "'"
                    - Ref: corsallowOrigins
                    - "'"
              method.response.header.Vary: "'Origin'"
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,DELETE,OPTIONS'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Vary: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  PocItsmeApireaddbGETApiPermissionLoginwithitsmeCdkStackPocItsmeApiDC0C1E2AGETreaddb06F73B4C:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - Read0389503C
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: PocItsmeApiC7C28CD6
            - /
            - Ref: PocItsmeApiDeploymentStageprod10084B92
            - /GET/readdb
  PocItsmeApireaddbGETApiPermissionTestLoginwithitsmeCdkStackPocItsmeApiDC0C1E2AGETreaddb0173063B:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - Read0389503C
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: PocItsmeApiC7C28CD6
            - /test-invoke-stage/GET/readdb
  PocItsmeApireaddbGET72C3E9AE:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: PocItsmeApireaddbBBD46ECF
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: restapicognitoauthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - Read0389503C
                  - Arn
              - /invocations
  restapicognitoauthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: cognitoauthorizer
      RestApiId:
        Ref: PocItsmeApiC7C28CD6
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - Ref: cognitoUserPoolArn
Outputs:
  PocItsmeApiEndpoint14F8363A:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: PocItsmeApiC7C28CD6
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: PocItsmeApiDeploymentStageprod10084B92
          - /
  ApiGWUrl:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: PocItsmeApiC7C28CD6
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: PocItsmeApiDeploymentStageprod10084B92
          - /